:root {
  /* Define reusable variables */
  --color-accent: #5eead4;
  --color-highlight: #e2e8f0;
  --background-accent: rgba(45, 212, 191, 0.1);
}

html {
  /* Automated scrolling is smooth, not instantaneous */
  scroll-behavior: smooth;
}
* {
  /* Ensure elements dont overflow their containers.  */
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
}

body {
  background-color: #0f172a;
  color: #94a3b8;
  /*rem is relative, pixel is not, used for vertical and horizontal padding*/
  padding: 4rem 2rem;
  /* Defines the presentation of info to be 2 columns one a big screen, and split space evenly on a smaller screen */
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  gap: 6rem;
}

p {
  line-height: 1.5rem;
}

/* Change highlight color of selected text. */
p::selection,
h1::selection,
h2::selection,
h3::selection,
h4::selection,
h5::selection,
h6::selection,
.anchor-text::selection {
  background-color: var(--color-accent);
  color: #0f172a;
}

p,
h2 {
  font-size: 0.9rem;
}

/* Create a background styling color that sits beneath text, but over background color. */
.underlay {
  position: fixed;
  background-color: #172554;
  inset: 0;
  opacity: 0.15;
}

/* Defines the 'order' of background color layers. */
header,
main,
footer {
  position: relative;
  z-index: 10;
}

header {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 320px;
}

/* Applied style to h1, h2, and created a class that can be applied to html blocks. */
header h1,
h4,
.lightText {
  color: var(--color-highlight);
}

header a {
  text-decoration: none;
}

a {
  text-decoration: none;
}

/* Font thickness */
header h1 {
  font-weight: 700;
}

h2 {
  line-height: 1.5rem;
}

/* h3 {
  text-decoration: none;
} */

header h4 {
  font-weight: 400;
}

/* Because we intend to make sections layed out in one column, we give the entirety of main a flex layout */
main {
  display: flex;
  flex-direction: column;
  gap: 6rem;
}

section {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

section h2,
.experience-card h3,
.project-card h3 {
  text-transform: uppercase;
  font-size: 1rem;
  font-weight: 500;
}

.sticky-header {
  position: sticky;
  top: 0;
  padding: 1rem 0rem;
}

.sticky-header h2 {
  position: relative;
  z-index: 2;
}

/* Before and Afters are defined as Pseudo-elements, a sort of 'fake' html element */
.sticky-header::before {
  /* Before/After effects do not render unless content is applied */
  content: "";
  position: absolute;
  inset: 0;
  background: #101a31;
  opacity: 0.8;
}

.about-contents {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.about-contents p {
  font-size: 1.1rem;
}

/* Set default color for anchor text */
.anchor-text {
  color: var(--color-highlight);
  text-decoration: none;
  /* Slower animation for hover effect */
  transition-duration: 200ms;
}

/* When anchor text hovered, accent it */
.anchor-text:hover {
  color: var(--color-accent);
}

.experience-contents,
.project-contents {
  display: flex;
  flex-direction: column;
  gap: 4rem;
}

.experience-card,
.project-card {
  /* Taken from body, changes the gap to be equal to the about-contents, 1 rem, this displays Experience content as a singular column on smaller screens*/
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.experience-card {
  gap: 0.5rem;
}
.project-card {
  gap: 1rem;
}

.card-column {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.experience-card h3 a,
.project-contents h3 a {
  text-decoration: none !important;
  color: inherit;
}

.tenure {
  opacity: 0.7;
  text-transform: uppercase;
  font-size: 0.8rem;
}

.experience-card p {
  font-size: 0.9rem;
}

.card-header {
  font-weight: 500;
  font-size: 1rem;
  text-decoration: none;
}

.tag-container {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  color: var(--color-accent);
}

.tag {
  border-radius: 1rem;
  padding: 0.25rem 0.5rem;
  background: var(rgba(45, 212, 191, 0.1));
}

.tag p {
  font-size: 0.8rem;
}

.project-image-container {
  /* Using grid offers the easiest way to center an image */
  max-width: 190px;
  overflow: hidden;
  display: grid;
  place-items: center;
  aspect-ratio: 16/9;
  /* Forces this item to come second in a group of elements, top to bottom */
  order: 2;
  border-radius: 0.45rem;
}

.project-image-container img {
  /* Scale image to cover every part of the container */
  object-fit: cover;
  width: 100%;
  height: 100%;
}

.project-archive-link {
  position: relative;
  color: var(--color-highlight);
  text-decoration: none;
  /* transition-duration: 200ms; */
  /* Takes up only as much space as it needs to, truncates unused space to the right side */
  margin-right: auto;
}

/* When padding is applpied, slow down padding to emulate animation for right-arrow */
.project-archive-link span {
  transition-duration: 200ms;
}

/* When hovering over link, add padding  */
.project-archive-link:hover span {
  padding-left: 0.5rem;
}

.project-archive-link::after {
  content: "";
  /* Tethers itself to the relative position of project-archive-link */
  position: absolute;
  /* Start from the left hand side, take up entireity of the width */
  left: 0;
  width: 100%;
  height: 1.5px;
  bottom: 0;
  /* Default background is transparent so we cant see it until hover state activateed */
  background: transparent;
}

.project-archive-link:hover::after {
  background: var(--color-accent);
}

footer {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  /* Content is on different ends of page horizontally */
  justify-content: space-between;
  align-items: flex-start;
}

footer p {
  font-size: 0.9rem;
}

/* Style Top of page button */
.scroll-to-top {
  text-decoration: none;
  color: var(--color-accent);
  background: var(--background-accent);
  padding: 0 0.75rem;
  aspect-ratio: 1/1;
  display: grid;
  place-items: center;
  border-radius: 100%;
  overflow: hidden;
  transition-duration: 200ms;
}

.scroll-to-top:hover {
  opacity: 0.6;
}
